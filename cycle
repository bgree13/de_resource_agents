#!/bin/sh
#
#
#	cycle OCF RA. Does nothing but wait a few seconds, can be
#	configured to fail occassionally.
#
# Copyright (c) 2004 SUSE LINUX AG, Lars Marowsky-Brée
#                    All Rights Reserved.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of version 2 of the GNU General Public License as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it would be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
#
# Further, this software is distributed without any warranty that it is
# free of the rightful claim of any third person regarding infringement
# or the like.  Any license provided herein, whether implied or
# otherwise, applies only to this software file.  Patent licenses, if
# any, provided herein do not apply to combinations of this program with
# other software, or any other product whatsoever.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write the Free Software Foundation,
# Inc., 59 Temple Place - Suite 330, Boston MA 02111-1307, USA.
#

#######################################################################
# Initialization:

#: ${OCF_FUNCTIONS_DIR=${OCF_ROOT}/lib/custom}
#. ${OCF_FUNCTIONS_DIR}/ocf-shellfuncs

if [ -z "$OCF_ROOT" ]; then
    : ${OCF_ROOT=/usr/lib/ocf}
fi

if [ "$OCF_FUNCTIONS_DIR" = ${OCF_ROOT}/resource.d/heartbeat ]; then  # old
        unset OCF_FUNCTIONS_DIR
fi

: ${OCF_FUNCTIONS_DIR:=${OCF_ROOT}/lib/heartbeat}

. ${OCF_FUNCTIONS_DIR}/ocf-binaries
. ${OCF_FUNCTIONS_DIR}/ocf-returncodes
. ${OCF_FUNCTIONS_DIR}/ocf-directories
. ${OCF_FUNCTIONS_DIR}/ocf-shellfuncs

#if test -n "${OCF_FUNCTIONS_DIR}" ; then
#        if test -e "${OCF_FUNCTIONS_DIR}/ocf-shellfuncs" ; then
#                . "${OCF_FUNCTIONS_DIR}/ocf-shellfuncs"
#        elif test -e "${OCF_FUNCTIONS_DIR}/.ocf-shellfuncs" ; then
#                . "${OCF_FUNCTIONS_DIR}/.ocf-shellfuncs"
#        fi
#else
#        if test -e "${OCF_ROOT}/lib/heartbeat/ocf-shellfuncs" ; then
#                . "${OCF_ROOT}/lib/heartbeat/ocf-shellfuncs"
#        elif test -e "${OCF_ROOT}/resource.d/heartbeat/.ocf-shellfuncs"; then
#                . "${OCF_ROOT}/resource.d/heartbeat/.ocf-shellfuncs"
#        fi
#fi

#######################################################################

meta_data() {
	cat <<END
<?xml version="1.0"?>
<!DOCTYPE resource-agent SYSTEM "ra-api-1.dtd">
<resource-agent name="cycle" version="0.1">
<version>1.0</version>

<longdesc lang="en">
This is a cycle Resource Agent. It does absolutely nothing except 
keep track of whether the cyle process is running or not.

NB: Please pay attention to the timeouts specified in the actions
section below. They should be meaningful for the kind of resource
the agent manages. They should be the minimum advised timeouts,
but they shouldn't/cannot cover _all_ possible resource
instances. So, try to be neither overly generous nor too stingy,
but moderate. The minimum timeouts should never be below 10 seconds.
</longdesc>

<shortdesc lang="en">Example cycle resource agent</shortdesc>

<parameters>

<parameter name="binpath" >
<longdesc lang="en">
The cycle binary path 
For example, "/usr/bin/"
</longdesc>
<shortdesc lang="en">Full path to the cycle binary</shortdesc>
<content type="string" default="/usr/bin/" />
</parameter>

<parameter name="conffile">
<longdesc lang="en">
The rsync daemon configuration file name with full path. 
For example, "/etc/cycle.conf"
</longdesc>
<shortdesc lang="en">Configuration file name with full path</shortdesc>
<content type="string" default="/etc/cycle.conf" />
</parameter>

</parameters>

<actions>
<action name="start"        timeout="20s" />
<action name="stop"         timeout="20s" />
<action name="monitor"      timeout="20s" interval="10s" depth="0" />
<action name="validate-all" timeout="20s" />
<action name="meta-data"  timeout="5s"/>
</actions>
</resource-agent>
END
}

#######################################################################

USAGE="Usage: $0 {start|stop|monitor|status|validate-all|meta-data}";


cycle_usage() {

	echo $USAGE >&2
}

get_pid_file() {

	if [ -n "$OCF_RESKEY_conffile" ]; then
		CONF_FILE=$OCF_RESKEY_conffile
	else
		CONF_FILE="/etc/cycle.conf"
	fi

	grep "PIDFILE=" $CONF_FILE | cut -d '=' -f2 >/dev/null
	if [ $? -eq 0 ]; then
		PIDFILE=`grep "PIDFILE=" $CONF_FILE | cut -d '=' -f2`
	fi
}

cycle_status() {
	# Monitor _MUST!_ differentiate correctly between running
	# (SUCCESS), failed (ERROR) or _cleanly_ stopped (NOT RUNNING).
	# That is THREE states, not just yes/no.
	get_pid_file	
	if [ -n "$PIDFILE" -a -f $PIDFILE ]; then
	    #cycle is likely running 	
		PID=`cat $PIDFILE`
		if [ -n "$PID" ]; then
			if ps -p $PID | grep cycle >/dev/null ; then				
				ocf_log info "cycle daemon running"
				return $OCF_SUCCESS
			else	
				ocf_log error "cycle daemon is not running but pid file exists"
                                return $OCF_NOT_RUNNING
			fi
		else
			ocf_log error "PID file empty or doesn't exist!"
			return $OCF_NOT_RUNNING
		fi
	fi

	ocf_log info "cycle daemon is not running"
	return $OCF_NOT_RUNNING
}

cycle_start() {
    cycle_status
    local rc=$?	
    if [ $rc -eq $OCF_SUCCESS ]; then
	return $OCF_SUCCESS
    elif [ $rc -ne $OCF_NOT_RUNNING ]; then
	ocf_exit_reason "Error. Unknown status."
	exit $OCF_ERR_GENERIC
    fi

    if [ -n "$OCF_RESKEY_binpath" ]; then
	COMMAND="$OCF_RESKEY_binpath/cycle_service start"
    else
	COMMAND="/usr/bin/cycle_service start"
    fi		
    ocf_log info "$OCF_RESKEY_binpath/cycle_service start" 	  
    if grep "PIDFILE=" $CONF_FILE | cut -d '=' -f2 >/dev/null; then
 	$COMMAND start;
	if [ $? -ne 0 ]; then
		ocf_exit_reason "Error. cycle daemon returned error $rc."		
		exit $OCF_ERR_GENERIC
	fi
    else
	ocf_exit_reason "Error. \"PID\" entry required in the cycle config file to be run by OCF."
	return $OCF_ERR_GENERIC
    fi	 	
    ocf_log info "Started cycle daemon."	
    exit $OCF_SUCCESS	

}

cycle_stop() {
   if cycle_status; then
                PID=`cat $PIDFILE`
                if [ -n "$PID" ] ; then
                        #kill $PID
			COMMAND="/usr/bin/cycle_service stop"
			$COMMAND;
                        if [ $? -ne 0 ]; then
                                kill -s KILL $PID
                                if [ $? -ne 0 ]; then
                                        ocf_exit_reason "Error. Could not stop cycle daemon."
                                        return $OCF_NOT_RUNNING
                                fi
                        fi
                rm $PIDFILE 2>/dev/null
                fi
        fi
        ocf_log info "Cycle daemon stopped"
        exit $OCF_SUCCESS

}

cycle_validate() {
    
    cycle_status
    #Check whether config file exist
    if [ -n "$OCF_RESKEY_conffile" -a ! -f "$OCF_RESKEY_conffile" ]; then
    	ocf_exit_reason "Config file $OCF_RESKEY_conffile does not exist."
    	exit $OCF_ERR_ARGS
    fi

   #Determine if PID file variable is set
    if grep "PIDFILE=" $CONF_FILE | cut -d '=' -f2 >/dev/null; then
	:
    else
        ocf_exit_reason "Error. \"PID\" entry required in the cycle config file to be run by OCF."
        return $OCF_ERR_GENERIC
    fi

    return $OCF_SUCCESS

}

#: ${OCF_RESKEY_state=${HA_RSCTMP}/cycle-${OCF_RESOURCE_INSTANCE}.state}
#: ${OCF_RESKEY_fake="cycle"}

#####
#
#MAIN
#
#####

if [ $# -ne 1 ]; then
        cycle_usage
        exit $OCF_ERR_ARGS
fi


case $1 in
	start)  
                cycle_start
        ;;
        stop)
                cycle_stop
        ;;
        status) 
		cycle_status
        ;;
        monitor)
		cycle_status
        ;;
        validate-all)   
                cycle_validate
        ;;
        meta-data)    
		meta_data
        ;;
        usage)  
		cycle_usage
                exit $OCF_SUCCESS
                ;;

        *)      cycle_usage
                exit $OCF_ERR_UNIMPLEMENTED
                ;;
esac
